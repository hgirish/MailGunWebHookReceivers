using System;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks;

namespace WebHooksReceiversMailGun.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by MailGun. 
    /// A sample WebHook URI is '<c>https://&lt;host&gt;/api/webhooks/incoming/mailgun/{id}?code=83699ec7c1d794c0c780e49a5c72972590571fd8</c>'.
    /// For security reasons the WebHook URI must be an <c>https</c> URI and contain a 'code' query parameter with the
    /// same value as configured in the '<c>MS_WebHookReceiverSecret_MailGun</c>' application setting.
    /// The 'code' parameter must be between 32 and 128 characters long.
    /// For details about MailGun WebHooks, see <c>https://documentation.mailgun.com/api-webhooks.html</c>. 
    /// </summary>
    public class MailGunWebHookReceiver : WebHookReceiver
    {
        internal const string RecName = "mailgun";
        /// <summary>
        /// Gets the receiver name for this receiver.
        /// </summary>
        public static string ReceiverName => RecName;

        /// <inheritdoc />
        public override string Name => RecName;

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }
            if (request == null)
            {
                throw new ArgumentNullException(nameof(request));
            }

            if (request.Method == HttpMethod.Post)
            {
                // Ensure that we use https and have a valid code parameter
                await EnsureValidCode(request, id);

                // Read the request entity body
                if (request.Content.IsFormData())
                {
                    NameValueCollection data = await ReadAsFormDataAsync(request);

                    string action = data["token"];
                    if (string.IsNullOrEmpty(action))
                    {
                        string msg = string.Format(CultureInfo.CurrentCulture,
                            "The HTTP request body did not contain a required '{0}' property.", "token");
                        context.Configuration.DependencyResolver.GetLogger().Error(msg);
                        HttpResponseMessage badType = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                        return badType;
                    }

                    // Call registered handlers
                    return await ExecuteWebHookAsync(id, context, request, new[] { action }, data);
                }
                if (request.Content.IsMimeMultipartContent())
                {
                    
                  
                    string root = Path.GetTempPath();
                    if (!Directory.Exists(root))
                    {
                        Directory.CreateDirectory(root);
                    }
                    var provider = new MultipartFormDataStreamProvider(root);
                    await request.Content.ReadAsMultipartAsync(provider);

                    string action = provider.FormData["token"];
                    var data = provider.FormData;
                    if (string.IsNullOrEmpty(action))
                    {
                        string msg = string.Format(CultureInfo.CurrentCulture,
                            "The HTTP request body did not contain a required '{0}' property.", "token");
                        context.Configuration.DependencyResolver.GetLogger().Error(msg);
                        HttpResponseMessage badType = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                        return badType;
                    }

                    // Call registered handlers
                    return await ExecuteWebHookAsync(id, context, request, new[] { action }, data);

                }
                string msg2 = string.Format(CultureInfo.CurrentCulture,
                           "The HTTP request body is not Form data or multipart data");
                context.Configuration.DependencyResolver.GetLogger().Error(msg2);
                return request.CreateErrorResponse(HttpStatusCode.BadRequest, msg2);

            }
            else if (request.Method == HttpMethod.Get)
            {
                // Ensure that we use https and have a valid code parameter
                await EnsureValidCode(request, id);

                return request.CreateResponse();
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }
    }
}